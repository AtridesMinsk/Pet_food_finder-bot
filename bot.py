# pip install aiogram apscheduler

import json
import random
import garfild_v2_correct_data
import garfild_v2_site_data_download
import gavrik_v2_correct_data
import gavrik_v2_site_data_download
import ezoo_v2_correct_data
import ezoo_v2_site_data_download
import os

from time import sleep
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.utils.markdown import hbold, hlink
from apscheduler.schedulers.asyncio import AsyncIOScheduler


def get_bot_token():
    try:
        from bot_token import token2 as token
        b_token = token
        print("Bot token local find!")
    except ModuleNotFoundError:
        print("Bot token local not find!", "\n", "Get token from Heroku vars")
        b_token = os.environ.get('TOKEN_KEY')

    print("\n", "Enjoy!")
    return b_token


bot = Bot(token=get_bot_token(), parse_mode=types.ParseMode.HTML)
scheduler = AsyncIOScheduler()
starting_dir = str(os.getcwd())
dp = Dispatcher(bot)
start_date = datetime.now().strftime("%d.%m.%Y")
start_time = datetime.now().strftime("%H:%M:%S")

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!", start_date, start_time)


@dp.message_handler(commands='update_data')
async def data_update(commands="update_data"):

    garfild_v2_site_data_download.main()
    os.chdir(starting_dir)
    gavrik_v2_site_data_download.main()
    os.chdir(starting_dir)
    ezoo_v2_site_data_download.main()
    os.chdir(starting_dir)


@dp.message_handler(commands='start')
async def start(message: types.Message):
    start_messge = f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b> –î–ª—è –∫–æ–≥–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –∫–æ—Ä–º?'
    start_buttons = ['–î–ª—è –ö–æ—Ç–æ–≤', '–î–ª—è –°–æ–±–∞–∫']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons)

    await message.answer(start_messge, reply_markup=keyboard, parse_mode='html')


@dp.message_handler(commands='user_info')
async def start(message: types.Message):
    start_messge = f'{message}'

    await message.answer(start_messge, parse_mode='html')


@dp.message_handler(Text(equals='–î–ª—è –ö–æ—Ç–æ–≤'))
async def get_data_cat(message: types.Message):
    start_buttons = ['–°—É—Ö–æ–π –∫–æ—Ä–º –¥–ª—è –∫–æ—Ç–æ–≤', '–ö–æ–Ω—Å–µ—Ä–≤—ã –¥–ª—è –∫–æ—Ç–æ–≤', '–ù–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –¥–ª—è —Ç—É–∞–ª–µ—Ç–∞', '–í—ã–±—Ä–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons)

    await message.answer('–ß–µ–º –±—É–¥–µ–º –∫–æ—Ä–º–∏—Ç—å –≤–∞—à–µ–≥–æ –ö–æ—Ç–∏–∫–∞?', reply_markup=keyboard)


@dp.message_handler(Text(equals='–î–ª—è –°–æ–±–∞–∫'))
async def get_data_dog(message: types.Message):
    start_buttons = ['–°—É—Ö–æ–π –∫–æ—Ä–º –¥–ª—è —Å–æ–±–∞–∫', '–ö–æ–Ω—Å–µ—Ä–≤—ã –¥–ª—è —Å–æ–±–∞–∫', '–í—ã–±—Ä–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons)

    await message.answer('–ß–µ–º –±—É–¥–µ–º –∫–æ—Ä–º–∏—Ç—å –≤–∞—à–µ–≥–æ –ü–µ—Å–∏–∫–∞?', reply_markup=keyboard)


@dp.message_handler(Text(equals='–í—ã–±—Ä–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞'))
async def get_data_start(message: types.Message):
    start_buttons = ['–î–ª—è –ö–æ—Ç–æ–≤', '–î–ª—è –°–æ–±–∞–∫']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons)

    await message.answer('–î–ª—è –∫–æ–≥–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –∫–æ—Ä–º?', reply_markup=keyboard)


@dp.message_handler(Text(equals='–°—É—Ö–æ–π –∫–æ—Ä–º –¥–ª—è –∫–æ—Ç–æ–≤'))
async def get_data_cats_dry_food(message: types.Message):
    await message.answer('Please waiting...')

    try:
        garfild_v2_correct_data.main(1, 3)
        os.chdir(starting_dir)
        gavrik_v2_correct_data.main(1, 3)
        os.chdir(starting_dir)
        ezoo_v2_correct_data.main(1, 3)
        os.chdir(starting_dir)

        set_current_date = datetime.now().strftime("%d.%m.%Y")
        set_current_time = datetime.now().strftime("%H:%M:%S")
        cur_date = datetime.now().strftime("%d_%m_%Y")

        with open(f"{starting_dir}/garfild/data/cats/dry_food/discount_{cur_date}.json") as file1, \
                open(f"{starting_dir}/gavrik/data/cats/dry_food/discount_{cur_date}.json") as file2, \
                open(f"{starting_dir}/ezoo/data/cats/dry_food/discount_{cur_date}.json") as file3:
            data_garfild = json.load(file1)
            data_garvik = json.load(file2)
            data_ezoo = json.load(file3)
            os.chdir(starting_dir)

        data = data_garfild + data_garvik + data_ezoo
        print(set_current_date, set_current_time, '–í—ã–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å—É—Ö–∏–µ –∫–æ—Ä–º–∞ –¥–ª—è –∫–æ—à–µ–∫', len(data))

        if (len(data)) > 0:
            for index, item in enumerate(data):
                card = f'{hbold("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ")}{hlink(item.get("product_name"), item.get("product_url"))}\n' \
                       f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("discount")}%\n' \
                       f'{hbold("–¶–µ–Ω–∞: ")}{item.get("product_new_price")} BYNüî•\n' \

                if index % 20 == 0:
                    sleeptime = random.randint(1, 5)
                    sleep(sleeptime)

                await message.answer(card, disable_web_page_preview=True)
        else:
            await message.answer("–£–ø—Å..., —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–∫–∏–¥–∫–æ–π –Ω–µ –Ω–∞—à–ª–∏ (")
    except FileNotFoundError:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ, –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (")


@dp.message_handler(Text(equals='–°—É—Ö–æ–π –∫–æ—Ä–º –¥–ª—è —Å–æ–±–∞–∫'))
async def get_data_dogs_dry_food(message: types.Message):
    await message.answer('Please waiting...')

    try:
        garfild_v2_correct_data.main(2, 3)
        os.chdir(starting_dir)
        gavrik_v2_correct_data.main(2, 3)
        os.chdir(starting_dir)
        ezoo_v2_correct_data.main(2, 3)
        os.chdir(starting_dir)

        set_current_date = datetime.now().strftime("%d.%m.%Y")
        set_current_time = datetime.now().strftime("%H:%M:%S")
        cur_date = datetime.now().strftime("%d_%m_%Y")

        with open(f"{starting_dir}/garfild/data/dogs/dry_food/discount_{cur_date}.json") as file1, \
                open(f"{starting_dir}/gavrik/data/dogs/dry_food/discount_{cur_date}.json") as file2, \
                open(f"{starting_dir}/ezoo/data/dogs/dry_food/discount_{cur_date}.json") as file3:
            data_garfild = json.load(file1)
            data_garvik = json.load(file2)
            data_ezoo = json.load(file3)
            os.chdir(starting_dir)

        data = data_garfild + data_garvik + data_ezoo
        print(set_current_date, set_current_time, '–í—ã–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å—É—Ö–∏–µ –∫–æ—Ä–º–∞ –¥–ª—è —Å–æ–±–∞–∫', len(data))
        if (len(data)) > 0:
            for index, item in enumerate(data):
                card = f'{hbold("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ")}{hlink(item.get("product_name"), item.get("product_url"))}\n' \
                       f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("discount")}%\n' \
                       f'{hbold("–¶–µ–Ω–∞: ")}{item.get("product_new_price")} BYNüî•\n' \

                if index % 20 == 0:
                    sleeptime = random.randint(1, 5)
                    sleep(sleeptime)

                await message.answer(card, disable_web_page_preview=True)
        else:
            await message.answer("–£–ø—Å..., —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–∫–∏–¥–∫–æ–π –Ω–µ –Ω–∞—à–ª–∏ (")
    except FileNotFoundError:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ, –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (")


@dp.message_handler(Text(equals='–ö–æ–Ω—Å–µ—Ä–≤—ã –¥–ª—è –∫–æ—Ç–æ–≤'))
async def get_data_cats_canned_food(message: types.Message):
    await message.answer('Please waiting...')

    try:
        garfild_v2_correct_data.main(1, 4)
        os.chdir(starting_dir)
        gavrik_v2_correct_data.main(1, 4)
        os.chdir(starting_dir)
        ezoo_v2_correct_data.main(1, 4)
        os.chdir(starting_dir)

        set_current_date = datetime.now().strftime("%d.%m.%Y")
        set_current_time = datetime.now().strftime("%H:%M:%S")
        cur_date = datetime.now().strftime("%d_%m_%Y")

        with open(f"{starting_dir}/garfild/data/cats/canned_food/discount_{cur_date}.json") as file1, \
                open(f"{starting_dir}/gavrik/data/cats/canned_food/discount_{cur_date}.json") as file2, \
                open(f"{starting_dir}/ezoo/data/cats/canned_food/discount_{cur_date}.json") as file3:
            data_garfild = json.load(file1)
            data_garvik = json.load(file2)
            data_ezoo = json.load(file3)
            os.chdir(starting_dir)

        data = data_garfild + data_garvik + data_ezoo
        print(set_current_date, set_current_time, '–í—ã–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Å–µ—Ä–≤—ã –¥–ª—è –∫–æ—à–µ–∫', len(data))

        if (len(data)) > 0:
            for index, item in enumerate(data):
                card = f'{hbold("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ")}{hlink(item.get("product_name"), item.get("product_url"))}\n' \
                       f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("discount")}%\n' \
                       f'{hbold("–¶–µ–Ω–∞: ")}{item.get("product_new_price")} BYNüî•\n' \

                if index % 20 == 0:
                    sleeptime = random.randint(1, 5)
                    sleep(sleeptime)

                await message.answer(card, disable_web_page_preview=True)
        else:
            await message.answer("–£–ø—Å..., —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–∫–∏–¥–∫–æ–π –Ω–µ –Ω–∞—à–ª–∏ (")
    except FileNotFoundError:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ, –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (")


@dp.message_handler(Text(equals='–ö–æ–Ω—Å–µ—Ä–≤—ã –¥–ª—è —Å–æ–±–∞–∫'))
async def get_data_cats_canned_food(message: types.Message):
    await message.answer('Please waiting...')

    try:
        garfild_v2_correct_data.main(2, 4)
        os.chdir(starting_dir)
        gavrik_v2_correct_data.main(2, 4)
        os.chdir(starting_dir)
        ezoo_v2_correct_data.main(2, 4)
        os.chdir(starting_dir)

        set_current_date = datetime.now().strftime("%d.%m.%Y")
        set_current_time = datetime.now().strftime("%H:%M:%S")
        cur_date = datetime.now().strftime("%d_%m_%Y")

        with open(f"{starting_dir}/garfild/data/dogs/canned_food/discount_{cur_date}.json") as file1, \
                open(f"{starting_dir}/gavrik/data/dogs/canned_food/discount_{cur_date}.json") as file2, \
                open(f"{starting_dir}/ezoo/data/dogs/canned_food/discount_{cur_date}.json") as file3:
            data_garfild = json.load(file1)
            data_garvik = json.load(file2)
            data_ezoo = json.load(file3)
            os.chdir(starting_dir)

        data = data_garfild + data_garvik + data_ezoo
        print(set_current_date, set_current_time, '–í—ã–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Å–µ—Ä–≤—ã –¥–ª—è —Å–æ–±–∞–∫', len(data))
        if (len(data)) > 0:
            for index, item in enumerate(data):
                card = f'{hbold("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ")}{hlink(item.get("product_name"), item.get("product_url"))}\n' \
                       f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("discount")}%\n' \
                       f'{hbold("–¶–µ–Ω–∞: ")}{item.get("product_new_price")} BYNüî•\n' \

                if index % 20 == 0:
                    sleeptime = random.randint(1, 5)
                    sleep(sleeptime)

                await message.answer(card, disable_web_page_preview=True)
        else:
            await message.answer("–£–ø—Å..., —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–∫–∏–¥–∫–æ–π –Ω–µ –Ω–∞—à–ª–∏ (")
    except FileNotFoundError:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ, –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (")


@dp.message_handler(Text(equals='–ù–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –¥–ª—è —Ç—É–∞–ª–µ—Ç–∞'))
async def get_data_cats_napolniteli(message: types.Message):
    await message.answer('Please waiting...')

    try:
        garfild_v2_correct_data.main(1, 5)
        os.chdir(starting_dir)
        gavrik_v2_correct_data.main(1, 5)
        os.chdir(starting_dir)
        ezoo_v2_correct_data.main(1, 5)
        os.chdir(starting_dir)

        set_current_date = datetime.now().strftime("%d.%m.%Y")
        set_current_time = datetime.now().strftime("%H:%M:%S")
        cur_date = datetime.now().strftime("%d_%m_%Y")

        with open(f"{starting_dir}/garfild/data/cats/napolniteli/discount_{cur_date}.json") as file1, \
                open(f"{starting_dir}/gavrik/data/cats/napolniteli/discount_{cur_date}.json") as file2, \
                open(f"{starting_dir}/ezoo/data/cats/napolniteli/discount_{cur_date}.json") as file3:
            data_garfild = json.load(file1)
            data_garvik = json.load(file2)
            data_ezoo = json.load(file3)
            os.chdir(starting_dir)

        data = data_garfild + data_garvik + data_ezoo
        print(set_current_date, set_current_time, '–í—ã–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ù–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –¥–ª—è –∫–æ—à–µ–∫', len(data))
        if (len(data)) > 0:
            for index, item in enumerate(data):
                card = f'{hbold("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ")}{hlink(item.get("product_name"), item.get("product_url"))}\n' \
                       f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("discount")}%\n' \
                       f'{hbold("–¶–µ–Ω–∞: ")}{item.get("product_new_price")} BYNüî•\n' \

                if index % 20 == 0:
                    sleeptime = random.randint(1, 5)
                    sleep(sleeptime)

                await message.answer(card, disable_web_page_preview=True)
        else:
            await message.answer("–£–ø—Å..., —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–∫–∏–¥–∫–æ–π –Ω–µ –Ω–∞—à–ª–∏ (")
    except FileNotFoundError:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ, –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (")


def schedule_jobs():
    """
    –î–ª—è cron –Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å timezone, –∞ –¥–ª—è interval –Ω–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞–Ω–∏–µ timezone!
    Cron requires a timezone, interval does not need a timezone!
    """
    # print("–ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å c 1:00 UTC+3")
    print("–ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ –∫–∞–∂–¥—ã–π —á–∞—Å")

    # scheduler.add_job(data_update, 'cron', day_of_week='0-6', hour=1, minute=00, timezone="Europe/Minsk", args=(dp,))
    scheduler.add_job(data_update, 'interval', hours=1, args=(dp,))


def main():
    schedule_jobs()
    scheduler.start()
    executor.start_polling(dp)


if __name__ == '__main__':
    main()
